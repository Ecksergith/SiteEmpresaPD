// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  address   String?
  city      String?
  state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  quotes    Quote[]
  testimonials Testimonial[]
  contacts  Contact[]
}

model ServiceCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  services    Service[]
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String
  shortDesc   String
  price       Float?
  image       String?
  featured    Boolean  @default(false)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  category    ServiceCategory @relation(fields: [categoryId], references: [id])
  quotes      Quote[]
}

model Quote {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String
  serviceId   String?
  description String
  budget      String?
  urgency     String?
  address     String?
  city        String?
  state       String?
  status      QuoteStatus @default(PENDING)
  notes       String?
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User?   @relation(fields: [userId], references: [id])
  service     Service? @relation(fields: [serviceId], references: [id])
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  content   String
  rating    Int      @default(5)
  image     String?
  approved  Boolean  @default(false)
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User?   @relation(fields: [userId], references: [id])
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  content     String
  excerpt     String
  slug        String   @unique
  image       String?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  author      String?
  tags        String?
  readTime    Int?
  views       Int      @default(0)
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FAQ {
  id          String   @id @default(cuid())
  question    String
  answer      String
  category    String?
  tags        String?
  active      Boolean  @default(true)
  priority    String   @default("medium")
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String?
  subject     String?
  message     String
  department  String?
  status      ContactStatus @default(PENDING)
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User?   @relation(fields: [userId], references: [id])
}

enum QuoteStatus {
  PENDING
  CONTACTED
  QUOTED
  ACCEPTED
  REJECTED
  COMPLETED
}

enum ContactStatus {
  PENDING
  CONTACTED
  RESOLVED
  CLOSED
}